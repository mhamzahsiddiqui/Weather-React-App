{"version":3,"sources":["DegreeToggle.js","Card.js","WeekContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Search","degreeType","updateForecastDegree","updateDegree","degree","Fragment","className","type","id","for","class","name","value","value1","checked","onChange","event","target","moment","require","Card","newDate","Date","weekday","this","props","day","dt","setTime","imgURL","weather","format","Math","round","main","temp","description","React","Component","WeekContainer","state","days","location","country","componentDidMount","weatherURL","fetch","then","res","json","data","console","log","list","dailyData","filter","reading","dt_txt","includes","setState","formatCards","map","index","newDegreeType","sendNewFetch","updateLocation","newLocation","updateCountry","newCountry","DegreeToggle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a61d696.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = ({degreeType, updateForecastDegree, updateDegree, degree}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <span className=\"switch\">\r\n      <input type=\"checkbox\" className=\"slider\" id=\"switch-id\"/>\r\n      </span>\r\n\r\n      <span className=\"switch\">\r\n  <input type=\"checkbox\" className=\"switch\" id=\"switch-id\"/>\r\n  <label for=\"switch-id\">Small switch</label>\r\n</span>\r\n\r\n\r\n      <div class=\"form-check form-check-inline\">\r\n        <input\r\n        class=\"form-check-input\"\r\n        type=\"radio\"\r\n        name=\"degree-type\"\r\n        id=\"celsius\"\r\n        value=\"metric\"\r\n        value1=\"C\"\r\n        checked={degreeType === \"metric\"}\r\n        onChange={\r\n            event => updateForecastDegree(event.target.value)\r\n            }/>\r\n        <label class=\"form-check-label\" for=\"celsius\">Celsius</label>\r\n      </div>\r\n      <div class=\"form-check form-check-inline\">\r\n        <input\r\n        class=\"form-check-input\"\r\n        type=\"radio\"\r\n        name=\"degree-type\"\r\n        id=\"farenheit\"\r\n        value=\"imperial\"\r\n        value1=\"F\"\r\n        checked={degreeType === \"imperial\"}\r\n        onChange={\r\n            event => updateForecastDegree(event.target.value)\r\n            }/>\r\n        <label class=\"form-check-label\" for=\"farenheit\">Farenheit</label>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './Card.css';\r\nimport DegreeToggle from './DegreeToggle';\r\nvar moment = require('moment');\r\n\r\nclass Card extends React.Component {\r\n  // Props: day, key(index)\r\n\r\n\r\n\r\n  render() {\r\n    let newDate = new Date();\r\n    const weekday = this.props.day.dt * 1000\r\n    newDate.setTime(weekday)\r\n\r\n    const imgURL = \"owf owf-\"+ this.props.day.weather[0].id +\" owf-5x red\"\r\n\r\n    // const farenheit = (parseInt(this.props.day.main.temp) - 273.15) * (9/5) + 32\r\n\r\n\r\n    return (\r\n      <div className=\"col-auto\">\r\n        <div className=\"card\">\r\n          <h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\r\n          <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n          <i className={imgURL}></i>\r\n          <h2>{Math.round(this.props.day.main.temp)} Â°C</h2>\r\n          <div className=\"card-body\">\r\n            <p className=\"card-text\">{this.props.day.weather[0].description}</p>\r\n            <button className=\"btn btn-dark btn-outline-light\">See Hourly Forecast</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\nimport DegreeToggle from './DegreeToggle';\r\n\r\n\r\nclass WeekContainer extends React.Component {\r\n  state = {\r\n    days: [],\r\n    location: \"zip=10302\",\r\n    country: \"us\",\r\n    degreeType: \"imperial\"\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?${this.state.location},${this.state.country}&units=${this.state.degreeType}&APPID=44c58566b438863f683b7e30a10cc124`\r\n    fetch(weatherURL)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      console.log(\"Data List Loaded\", data.list)\r\n      const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n      this.setState({days: dailyData})\r\n    })\r\n  }\r\n\r\n  formatCards = () => {\r\n    return this.state.days.map((day, index) => <Card day={day} key={index}/>)\r\n  }\r\n\r\n  updateForecastDegree = newDegreeType => {\r\n    this.setState({\r\n      degreeType: newDegreeType\r\n    }, this.sendNewFetch)\r\n  }\r\n\r\n  updateLocation = newLocation => {\r\n    this.setState({\r\n      location: newLocation\r\n    }, this.sendNewFetch)\r\n  }\r\n\r\n  updateCountry= newCountry => {\r\n    this.setState({\r\n      country: newCountry\r\n    }, this.sendNewFetch)\r\n  }\r\n\r\n  sendNewFetch = () => {\r\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?${this.state.location},${this.state.country}&units=${this.state.degreeType}&APPID=44c58566b438863f683b7e30a10cc124`\r\n    fetch(weatherURL)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      console.log(\"Data List Loaded\", data.list)\r\n      const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n      this.setState({days: dailyData})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n      <h1 className=\"display-1 jumbotron\">5-Day Forecast.</h1>\r\n      <DegreeToggle degreeType={this.state.degreeType} updateForecastDegree={this.updateForecastDegree}/>\r\n      <h5 className=\"display-5 text-muted\">New York, US</h5>\r\n        <div className=\"row justify-content-center\">\r\n\r\n          {this.formatCards()}\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeekContainer\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeekContainer from './WeekContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        < WeekContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}